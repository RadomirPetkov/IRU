// src/pages/CourseDetailPage.jsx - –ü–æ–ø—Ä–∞–≤–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–Ω–∏ React Hooks
import React, { useState, useEffect } from 'react';
import { useParams, Link, Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import VideoPlayer from '../components/VideoPlayer';
import { 
  ArrowLeft, 
  Play, 
  Clock, 
  CheckCircle, 
  Lock,
  BookOpen,
  Award,
  BarChart,
  Calendar,
  TrendingUp,
  User,
  Target,
  PlayCircle
} from 'lucide-react';
import { getCourseById } from '../data/coursesData';
import { 
  enrollUserInCourse,
  getCourseProgress,
  startVideo,
  completeVideo,
  getUserCompletedVideos
} from '../services/userService';

const CourseDetailPage = () => {
  const { courseId } = useParams();
  const { isAuthenticated, user, hasAccessToCourse, userProfile } = useAuth();
  const [selectedVideoIndex, setSelectedVideoIndex] = useState(0);
  const [completedVideos, setCompletedVideos] = useState(new Set());
  const [courseProgress, setCourseProgress] = useState(null);
  const [loading, setLoading] = useState(true);
  const [enrolling, setEnrolling] = useState(false);
  const [videoLoading, setVideoLoading] = useState(false);

  // –ù–∞–º–∏—Ä–∞–º–µ –∫—É—Ä—Å–∞
  const course = getCourseById(courseId);

  // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (user?.email && course) {
      loadCourseData();
    }
  }, [courseId, user?.email, course]);

  // –ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ
  useEffect(() => {
    if (selectedVideoIndex !== null && course && user?.email && !loading) {
      const selectedVideo = course.videos[selectedVideoIndex];
      if (selectedVideo) {
        handleVideoStart(selectedVideo);
      }
    }
  }, [selectedVideoIndex, user?.email, loading, course]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–æ—Å—Ç—ä–ø–∞ - –°–õ–ï–î hooks
  if (!isAuthenticated) {
    return <Navigate to="/courses" replace />;
  }

  if (!course) {
    return <Navigate to="/courses" replace />;
  }

  if (!hasAccessToCourse(courseId)) {
    return <Navigate to="/courses" replace />;
  }

  const selectedVideo = course.videos[selectedVideoIndex];

  const loadCourseData = async () => {
    if (!user?.email) return;
    
    setLoading(true);
    try {
      console.log(`üìö –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∫—É—Ä—Å ${courseId}...`);
      
      // –ü–æ–ª—É—á–∞–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å–∞ –ø–æ –∫—É—Ä—Å–∞
      const progressResult = await getCourseProgress(user.email, courseId);
      
      if (progressResult.success) {
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å –ø–æ –∫—É—Ä—Å–∞ –∑–∞—Ä–µ–¥–µ–Ω:', progressResult.data);
        setCourseProgress(progressResult.data);
      } else {
        console.log('üìù –ù—è–º–∞ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫—É—Ä—Å–∞. –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª...');
        // –ê–∫–æ –Ω—è–º–∞ –ø—Ä–æ–≥—Ä–µ—Å, –∑–∞–ø–∏—Å–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –∫—É—Ä—Å–∞
        setEnrolling(true);
        const enrollResult = await enrollUserInCourse(user.email, courseId, course.videos.length);
        
        if (enrollResult.success) {
          console.log('‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∑–∞–ø–∏—Å–∞–Ω –≤ –∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ');
          // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å–∞
          const newProgressResult = await getCourseProgress(user.email, courseId);
          if (newProgressResult.success) {
            setCourseProgress(newProgressResult.data);
            console.log('‚úÖ –ù–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å –∑–∞—Ä–µ–¥–µ–Ω:', newProgressResult.data);
          }
        } else {
          console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –∫—É—Ä—Å:', enrollResult.error);
        }
        setEnrolling(false);
      }
      
      // –ü–æ–ª—É—á–∞–≤–∞–º–µ –∑–∞–≤—ä—Ä—à–µ–Ω–∏—Ç–µ –≤–∏–¥–µ–∞
      const completedResult = await getUserCompletedVideos(user.email, courseId);
      if (completedResult.success) {
        console.log('‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞:', completedResult.completedVideos);
        setCompletedVideos(new Set(completedResult.completedVideos));
      } else {
        console.log('‚ÑπÔ∏è –ù—è–º–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞ –∑–∞ —Ç–æ–∑–∏ –∫—É—Ä—Å');
        setCompletedVideos(new Set());
      }
      
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∫—É—Ä—Å–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleVideoStart = async (video) => {
    if (!user?.email || !video || videoLoading) return;
    
    setVideoLoading(true);
    try {
      console.log(`‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ: ${video.title}`);
      const result = await startVideo(user.email, courseId, video.id);
      
      if (result.success) {
        console.log('‚úÖ –í–∏–¥–µ–æ—Ç–æ –µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–æ –∫–∞—Ç–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–æ');
      } else {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ:', result.error);
      }
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ:', error);
    } finally {
      setVideoLoading(false);
    }
  };

  const handleVideoSelection = (index) => {
    console.log(`üé¨ –ò–∑–±–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ ${index + 1}: ${course.videos[index].title}`);
    setSelectedVideoIndex(index);
  };

  const markVideoAsCompleted = async (videoIndex) => {
    if (!user?.email || !course.videos[videoIndex]) return;
    
    const video = course.videos[videoIndex];
    
    try {
      console.log(`‚úÖ –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: ${video.title}`);
      const result = await completeVideo(user.email, courseId, video.id);
      
      if (result.success) {
        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ª–æ–∫–∞–ª–Ω–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
        setCompletedVideos(prev => {
          const newSet = new Set([...prev, video.id]);
          console.log('üìä –û–±–Ω–æ–≤–µ–Ω–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞:', Array.from(newSet));
          return newSet;
        });
        
        // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å–∞
        const progressResult = await getCourseProgress(user.email, courseId);
        if (progressResult.success) {
          setCourseProgress(progressResult.data);
          console.log('üìà –û–±–Ω–æ–≤–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å:', progressResult.data);
        }
        
        console.log(`üéâ –í–∏–¥–µ–æ "${video.title}" —É—Å–ø–µ—à–Ω–æ –º–∞—Ä–∫–∏—Ä–∞–Ω–æ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!`);
        
        // –ê–∫–æ —Ç–æ–≤–∞ –µ –ø–æ—Å–ª–µ–¥–Ω–æ—Ç–æ –≤–∏–¥–µ–æ –∏ –∫—É—Ä—Å—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω
        if (progressResult.data?.progressPercentage === 100) {
          console.log('üèÜ –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø! –ö—É—Ä—Å—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω –Ω–∞ 100%!');
        }
        
      } else {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ:', result.error);
      }
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ:', error);
    }
  };

  const isVideoCompleted = (videoIndex) => {
    const video = course.videos[videoIndex];
    return completedVideos.has(video.id);
  };

  const getProgress = () => {
    if (courseProgress) {
      return courseProgress.progressPercentage || 0;
    }
    return (completedVideos.size / course.videos.length) * 100;
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return date.toLocaleDateString('bg-BG', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const canWatchNextVideo = () => {
    // –ú–æ–∂–µ –¥–∞ –≥–ª–µ–¥–∞ —Å–ª–µ–¥–≤–∞—â–æ—Ç–æ –≤–∏–¥–µ–æ —Å–∞–º–æ –∞–∫–æ —Ç–µ–∫—É—â–æ—Ç–æ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ
    return isVideoCompleted(selectedVideoIndex);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 pt-20 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-4 border-blue-500 mx-auto mb-6"></div>
          <h3 className="text-xl font-semibold text-gray-800 mb-2">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å–∞</h3>
          <p className="text-gray-600">–ú–æ–ª—è –∏–∑—á–∞–∫–∞–π—Ç–µ, –¥–æ–∫–∞—Ç–æ –∑–∞—Ä–µ–¥–∏–º –≤–∞—à–∏—è –ø—Ä–æ–≥—Ä–µ—Å...</p>
          {enrolling && (
            <p className="text-blue-600 mt-2">–ó–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –∫—É—Ä—Å–∞...</p>
          )}
        </div>
      </div>
    );
  }

  const progress = getProgress();
  const isLastVideo = selectedVideoIndex === course.videos.length - 1;
  const isCourseCompleted = completedVideos.size === course.videos.length;

  return (
    <div className="min-h-screen bg-gray-50 pt-20">
      {/* Breadcrumb Navigation */}
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 max-w-[1500px] py-4">
          <div className="flex items-center space-x-2 text-sm">
            <Link 
              to="/" 
              className="text-gray-600 hover:text-blue-600 transition-colors"
            >
              –ù–∞—á–∞–ª–æ
            </Link>
            <span className="text-gray-400">/</span>
            <Link 
              to="/courses" 
              className="text-gray-600 hover:text-blue-600 transition-colors"
            >
              –ö—É—Ä—Å–æ–≤–µ
            </Link>
            <span className="text-gray-400">/</span>
            <span className="text-gray-800 font-medium">{course.title}</span>
          </div>
        </div>
      </div>

      {/* Course Header */}
      <div className={`bg-gradient-to-r ${course.color} text-white py-12`}>
        <div className="container mx-auto px-4 max-w-[1500px]">
          <div className="flex items-center justify-between mb-6">
            <Link 
              to="/courses"
              className="flex items-center text-white hover:text-blue-100 transition-colors"
            >
              <ArrowLeft size={20} className="mr-2" />
              –û–±—Ä–∞—Ç–Ω–æ –∫—ä–º –∫—É—Ä—Å–æ–≤–µ—Ç–µ
            </Link>
            
            <div className="flex items-center space-x-4">
              {enrolling && (
                <div className="bg-white bg-opacity-20 px-4 py-2 rounded-full text-sm animate-pulse">
                  <PlayCircle size={16} className="inline mr-2" />
                  –ó–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –∫—É—Ä—Å–∞...
                </div>
              )}
              {userProfile && (
                <div className={`px-3 py-1 rounded-full text-sm font-medium ${userProfile.roleInfo?.color} bg-white`}>
                  <User size={14} className="inline mr-1" />
                  {userProfile.roleInfo?.name}
                </div>
              )}
              <div className="text-4xl">{course.icon}</div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2">
              <h1 className="text-3xl md:text-4xl font-bold mb-4">
                {course.title}
              </h1>
              <p className="text-xl text-white text-opacity-90 mb-6">
                {course.description}
              </p>
              
              <div className="flex flex-wrap items-center gap-6 text-white text-opacity-90">
                <div className="flex items-center">
                  <Play size={20} className="mr-2" />
                  {course.videos.length} –≤–∏–¥–µ–∞
                </div>
                <div className="flex items-center">
                  <Clock size={20} className="mr-2" />
                  {course.estimatedHours} —á–∞—Å–∞
                </div>
                <div className="flex items-center">
                  <Award size={20} className="mr-2" />
                  –ù–∏–≤–æ {course.level}
                </div>
                {courseProgress?.enrolledAt && (
                  <div className="flex items-center">
                    <Calendar size={20} className="mr-2" />
                    –ó–∞–ø–∏—Å–∞–Ω: {formatDate(courseProgress.enrolledAt)}
                  </div>
                )}
              </div>
            </div>
            
            <div className="lg:col-span-1">
              <div className="bg-white bg-opacity-10 rounded-lg p-6">
                <h3 className="font-semibold mb-4 flex items-center">
                  <BarChart className="mr-2" size={20} />
                  –ü—Ä–æ–≥—Ä–µ—Å –Ω–∞ –∫—É—Ä—Å–∞
                </h3>
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span>–ó–∞–≤—ä—Ä—à–µ–Ω–∏</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                  <div className="w-full bg-white bg-opacity-20 rounded-full h-3">
                    <div 
                      className="bg-white h-3 rounded-full transition-all duration-500 shadow-lg"
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                </div>
                <p className="text-sm text-white text-opacity-80 mb-4">
                  {completedVideos.size} –æ—Ç {course.videos.length} –≤–∏–¥–µ–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏
                </p>
                
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
                <div className="grid grid-cols-2 gap-4 text-center text-sm border-t border-white border-opacity-20 pt-4">
                  <div>
                    <div className="font-semibold flex items-center justify-center">
                      <Target size={16} className="mr-1" />
                      {course.videos.length}
                    </div>
                    <div className="text-white text-opacity-70">–õ–µ–∫—Ü–∏–∏</div>
                  </div>
                  <div>
                    <div className="font-semibold flex items-center justify-center">
                      <Clock size={16} className="mr-1" />
                      {course.estimatedHours}—á
                    </div>
                    <div className="text-white text-opacity-70">–í—Ä–µ–º–µ</div>
                  </div>
                </div>
                
                {/* –ü–æ—Å–ª–µ–¥–µ–Ω –¥–æ—Å—Ç—ä–ø */}
                {courseProgress?.lastAccessedAt && (
                  <div className="mt-4 pt-4 border-t border-white border-opacity-20">
                    <div className="flex items-center text-sm text-white text-opacity-80">
                      <TrendingUp size={16} className="mr-2" />
                      <div>
                        <div>–ü–æ—Å–ª–µ–¥–µ–Ω –¥–æ—Å—Ç—ä–ø:</div>
                        <div className="text-xs">{formatDate(courseProgress.lastAccessedAt)}</div>
                      </div>
                    </div>
                  </div>
                )}

                {/* –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å–∞ */}
                {isCourseCompleted && courseProgress?.completedAt && (
                  <div className="mt-4 pt-4 border-t border-white border-opacity-20">
                    <div className="flex items-center text-sm text-white">
                      <Award size={16} className="mr-2" />
                      <div>
                        <div className="font-semibold">–ö—É—Ä—Å –∑–∞–≤—ä—Ä—à–µ–Ω!</div>
                        <div className="text-xs text-white text-opacity-80">
                          {formatDate(courseProgress.completedAt)}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Course Content */}
      <div className="py-8">
        <div className="container mx-auto px-4 max-w-[1500px]">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            
            {/* Video Player */}
            <div className="lg:col-span-3">
              <div className="bg-white rounded-xl shadow-lg overflow-hidden relative">
                {videoLoading && (
                  <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
                    <div className="bg-white rounded-lg p-4">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"></div>
                      <p className="text-sm text-gray-600">–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ...</p>
                    </div>
                  </div>
                )}
                
                <VideoPlayer
                  videoUrl={selectedVideo.url}
                  title={selectedVideo.title}
                  autoplay={false}
                />
                
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h2 className="text-2xl font-bold text-gray-800 mb-2">
                        {selectedVideo.title}
                      </h2>
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <span className="flex items-center">
                          <PlayCircle size={16} className="mr-1" />
                          –õ–µ–∫—Ü–∏—è {selectedVideoIndex + 1}
                        </span>
                        <span className="flex items-center">
                          <Clock size={16} className="mr-1" />
                          {selectedVideo.duration}
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      {isVideoCompleted(selectedVideoIndex) ? (
                        <div className="flex items-center text-green-600 bg-green-50 px-3 py-2 rounded-full">
                          <CheckCircle size={16} className="mr-1" />
                          <span className="text-sm font-medium">–ó–∞–≤—ä—Ä—à–µ–Ω–æ</span>
                        </div>
                      ) : (
                        <button
                          onClick={() => markVideoAsCompleted(selectedVideoIndex)}
                          className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all duration-200 text-sm font-medium shadow-md hover:shadow-lg transform hover:scale-105"
                        >
                          –ú–∞—Ä–∫–∏—Ä–∞–π –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ
                        </button>
                      )}
                    </div>
                  </div>
                  
                  <p className="text-gray-700 leading-relaxed mb-6">
                    {selectedVideo.description}
                  </p>
                  
                  {/* Video Info Card */}
                  <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-200">
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div className="text-center">
                        <div className="font-semibold text-blue-600 mb-1">–õ–µ–∫—Ü–∏—è</div>
                        <div className="text-gray-700">{selectedVideoIndex + 1} –æ—Ç {course.videos.length}</div>
                      </div>
                      <div className="text-center">
                        <div className="font-semibold text-purple-600 mb-1">–ö—É—Ä—Å</div>
                        <div className="text-gray-700">–ù–∏–≤–æ {course.level}</div>
                      </div>
                      <div className="text-center">
                        <div className="font-semibold text-green-600 mb-1">–ü—Ä–æ–≥—Ä–µ—Å</div>
                        <div className="text-gray-700">{Math.round(progress)}%</div>
                      </div>
                      <div className="text-center">
                        <div className="font-semibold text-orange-600 mb-1">–°—Ç–∞—Ç—É—Å</div>
                        <div className={`text-sm ${isVideoCompleted(selectedVideoIndex) ? 'text-green-600' : 'text-gray-500'}`}>
                          {isVideoCompleted(selectedVideoIndex) ? '‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω–æ' : '‚è≥ –í –ø—Ä–æ—Ü–µ—Å'}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Playlist */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="p-4 bg-gradient-to-r from-gray-50 to-blue-50 border-b">
                  <h3 className="font-semibold text-gray-800 flex items-center">
                    <BookOpen className="mr-2" size={20} />
                    –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –∫—É—Ä—Å–∞
                  </h3>
                  <p className="text-xs text-gray-600 mt-1">
                    {completedVideos.size} –æ—Ç {course.videos.length} –∑–∞–≤—ä—Ä—à–µ–Ω–∏
                  </p>
                </div>
                
                <div className="max-h-96 overflow-y-auto">
                  {course.videos.map((video, index) => (
                    <div
                      key={video.id}
                      onClick={() => handleVideoSelection(index)}
                      className={`p-4 cursor-pointer border-b border-gray-100 hover:bg-gray-50 transition-all duration-200 ${
                        selectedVideoIndex === index 
                          ? 'bg-blue-50 border-l-4 border-l-blue-500 shadow-sm' 
                          : ''
                      }`}
                    >
                      <div className="flex items-start space-x-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium flex-shrink-0 transition-all duration-200 ${
                          isVideoCompleted(index) 
                            ? 'bg-green-500 text-white shadow-md' 
                            : selectedVideoIndex === index
                              ? 'bg-blue-500 text-white shadow-md'
                              : 'bg-gray-200 text-gray-600'
                        }`}>
                          {isVideoCompleted(index) ? (
                            <CheckCircle size={16} />
                          ) : (
                            index + 1
                          )}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <h4 className={`font-medium text-sm leading-tight ${
                            selectedVideoIndex === index ? 'text-blue-600' : 'text-gray-800'
                          }`}>
                            {video.title}
                          </h4>
                          <div className="flex items-center justify-between mt-1">
                            <span className="text-xs text-gray-500">
                              {video.duration}
                            </span>
                            {isVideoCompleted(index) && (
                              <span className="text-xs text-green-600 font-medium">
                                –ì–æ—Ç–æ–≤–æ ‚úì
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Course Completion Status */}
                {isCourseCompleted && (
                  <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 border-t border-green-200">
                    <div className="flex items-center text-green-700">
                      <Award className="mr-2 text-green-600" size={20} />
                      <div>
                        <p className="font-semibold text-sm">–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! üéâ</p>
                        <p className="text-xs">–ó–∞–≤—ä—Ä—à–∏—Ö—Ç–µ –∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ</p>
                        {courseProgress?.completedAt && (
                          <p className="text-xs mt-1 opacity-75">
                            {formatDate(courseProgress.completedAt)}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
              
              {/* Navigation Controls */}
              <div className="mt-6 space-y-3">
                {/* Previous Video */}
                {selectedVideoIndex > 0 && (
                  <button
                    onClick={() => setSelectedVideoIndex(selectedVideoIndex - 1)}
                    className="w-full flex items-center justify-center px-4 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 font-medium"
                  >
                    <ArrowLeft size={16} className="mr-2" />
                    –ü—Ä–µ–¥–∏—à–Ω–æ –≤–∏–¥–µ–æ
                  </button>
                )}
                
                {/* Next Video */}
                {!isLastVideo && (
                  <button
                    onClick={() => setSelectedVideoIndex(selectedVideoIndex + 1)}
                    disabled={!canWatchNextVideo()}
                    className={`w-full flex items-center justify-center px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
                      canWatchNextVideo()
                        ? 'bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-md hover:shadow-lg transform hover:scale-105'
                        : 'bg-gradient-to-r from-gray-400 to-gray-500 text-white cursor-not-allowed opacity-70'
                    }`}
                    title={!canWatchNextVideo() ? '–ó–∞–≤—ä—Ä—à–µ—Ç–µ —Ç–µ–∫—É—â–æ—Ç–æ –≤–∏–¥–µ–æ –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ' : '–°–ª–µ–¥–≤–∞—â–æ –≤–∏–¥–µ–æ'}
                  >
                    {canWatchNextVideo() ? (
                      <>
                        –°–ª–µ–¥–≤–∞—â–æ –≤–∏–¥–µ–æ
                        <Play size={16} className="ml-2" />
                      </>
                    ) : (
                      <>
                        <Lock size={16} className="mr-2" />
                        –ó–∞–∫–ª—é—á–µ–Ω–æ
                      </>
                    )}
                  </button>
                )}
                
                {/* Course Completion Message */}
                {isLastVideo && isVideoCompleted(selectedVideoIndex) && isCourseCompleted && (
                  <div className="text-center p-6 bg-gradient-to-br from-green-100 to-emerald-100 rounded-xl border-2 border-green-200">
                    <Award className="mx-auto mb-3 text-green-600" size={48} />
                    <h3 className="font-bold text-green-800 text-lg mb-2">
                      –ö—É—Ä—Å—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω! üèÜ
                    </h3>
                    <p className="text-green-700 text-sm mb-3">
                      –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –£—Å–ø–µ—à–Ω–æ –∑–∞–≤—ä—Ä—à–∏—Ö—Ç–µ –≤—Å–∏—á–∫–∏ {course.videos.length} –ª–µ–∫—Ü–∏–∏.
                    </p>
                    <p className="text-green-600 text-xs">
                      –ú–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ —Å —Å–ª–µ–¥–≤–∞—â–æ—Ç–æ –Ω–∏–≤–æ –∏–ª–∏ –¥–∞ –ø—Ä–µ–≥–ª–µ–¥–∞—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏—Ç–µ –æ—Ç–Ω–æ–≤–æ.
                    </p>
                    {courseProgress?.completedAt && (
                      <div className="mt-3 pt-3 border-t border-green-300 text-xs text-green-600">
                        –ó–∞–≤—ä—Ä—à–µ–Ω –Ω–∞: {formatDate(courseProgress.completedAt)}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CourseDetailPage;