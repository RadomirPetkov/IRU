// src/services/userService.js - Production –≥–æ—Ç–æ–≤–∞ –≤–µ—Ä—Å–∏—è —Å —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∏–º–µ–π–ª–∏
import {
  getUserProfile,
  createUserProfile,
  updateLastLogin,
  grantCourseAccess,
  revokeCourseAccess,
  enrollInCourse,
  getCourseProgress as getFirestoreCourseProgress,
  recordVideoWatch,
  markVideoAsCompleted,
  markVideoAsUncompleted,
  getCompletedVideos,
  startUserSession,
  endUserSession,
  getActivityStats,
  getAllUsers,
} from "../firebase/firestore";
import { getFunctions, httpsCallable } from "firebase/functions";
import app from "../firebaseConfig";
import { createUser } from "../firebaseAuth";

const functions = getFunctions(app, "europe-west3");

// –î–æ–±–∞–≤—è–º–µ Firebase Auth —Ñ—É–Ω–∫—Ü–∏–∏

// üÜï Helper —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∏–º–µ–π–ª–∏
const normalizeEmail = (email) => {
  if (!email || typeof email !== "string") return email;
  return email.trim().toLowerCase();
};

// –†–æ–ª–∏ –∏ —Ç–µ—Ö–Ω–∏—Ç–µ –ø—Ä–∞–≤–∞
export const ROLES = {
  ADMIN: "admin",
  TEACHER: "teacher",
  STUDENT: "student",
  GUEST: "guest",
};

export const ROLE_DEFINITIONS = {
  [ROLES.ADMIN]: {
    name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    color: "bg-red-100 text-red-800",
    permissions: [
      "view_all_courses",
      "manage_users",
      "manage_content",
      "view_analytics",
    ],
    defaultCourses: ["basic", "intermediate", "advanced", "expert"],
  },
  [ROLES.TEACHER]: {
    name: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª",
    color: "bg-green-100 text-green-800",
    permissions: ["view_courses", "manage_content", "view_student_progress"],
    defaultCourses: ["basic", "intermediate", "advanced"],
  },
  [ROLES.STUDENT]: {
    name: "–°—Ç—É–¥–µ–Ω—Ç",
    color: "bg-blue-100 text-blue-800",
    permissions: ["view_assigned_courses", "track_progress"],
    defaultCourses: ["basic"],
  },
  [ROLES.GUEST]: {
    name: "–ì–æ—Å—Ç",
    color: "bg-gray-100 text-gray-800",
    permissions: ["view_public_content"],
    defaultCourses: [],
  },
};

// ============= –û–°–ù–û–í–ù–ò –§–£–ù–ö–¶–ò–ò =============

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –ø—Ä–∏ –ø—ä—Ä–≤–æ –≤–ª–∏–∑–∞–Ω–µ
 */
export const initializeUser = async (userEmail, initialData = {}) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !normalizedEmail.includes("@")) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    const existingProfile = await getUserProfile(normalizedEmail);

    if (!existingProfile.success) {
      // –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
      const defaultData = {
        displayName:
          initialData.displayName || getDisplayNameFromEmail(normalizedEmail),
        role: initialData.role || ROLES.STUDENT,
        courses:
          initialData.courses || ROLE_DEFINITIONS[ROLES.STUDENT].defaultCourses,
        ...initialData,
      };

      await createUserProfile(normalizedEmail, defaultData);
    }

    // –ó–∞–ø–æ—á–≤–∞–º–µ –Ω–æ–≤–∞ —Å–µ—Å–∏—è
    await startUserSession(normalizedEmail);

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–µ–Ω –≤—Ö–æ–¥
    await updateLastLogin(normalizedEmail);

    return { success: true };
  } catch (error) {
    console.error("Error initializing user:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª" };
  }
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
 */
export const getFullUserProfile = async (userEmail) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !normalizedEmail.includes("@")) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    const profile = await getUserProfile(normalizedEmail);
    if (!profile.success) {
      return profile;
    }

    const roleInfo =
      ROLE_DEFINITIONS[profile.data.role] || ROLE_DEFINITIONS[ROLES.GUEST];

    return {
      success: true,
      data: {
        ...profile.data,
        roleInfo,
      },
    };
  } catch (error) {
    console.error("Error getting full user profile:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª" };
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∫—É—Ä—Å
 */
export const hasAccessToCourse = (userProfile, courseId) => {
  if (
    !userProfile ||
    !userProfile.permissions ||
    !Array.isArray(userProfile.permissions.courses)
  ) {
    return false;
  }
  return userProfile.permissions.courses.includes(courseId);
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞
 */
export const hasPermission = (userProfile, permission) => {
  if (!userProfile || !userProfile.role) {
    return false;
  }

  const roleInfo = ROLE_DEFINITIONS[userProfile.role];
  return (
    roleInfo &&
    Array.isArray(roleInfo.permissions) &&
    roleInfo.permissions.includes(permission)
  );
};

// ============= –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ò –§–£–ù–ö–¶–ò–ò =============

/**
 * –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
 */
export const adminCreateUser = async (adminEmail, newUserData) => {
  try {
    const normalizedAdminEmail = normalizeEmail(adminEmail);

    if (!normalizedAdminEmail || !newUserData) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const { email, password, displayName, role, courses } = newUserData;
    const normalizedUserEmail = normalizeEmail(email);

    // –í–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!normalizedUserEmail || !password) {
      return { success: false, error: "Email –∏ –ø–∞—Ä–æ–ª–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏" };
    }

    if (!normalizedUserEmail.includes("@") || password.length < 6) {
      return {
        success: false,
        error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email –∞–±–æ –ø–∞—Ä–æ–ª–∞ –ø—Ä–µ–∫–∞–ª–µ–Ω–æ –∫—ä—Å–∞",
      };
    }

    if (!isValidRole(role)) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Ä–æ–ª—è" };
    }

    // üÜï –ò–∑–≤–∏–∫–≤–∞–º–µ Cloud Function
    const createUserFunction = httpsCallable(functions, "createUser");
    const result = await createUserFunction({
      email: normalizedUserEmail,
      password: password,
      displayName: displayName || getDisplayNameFromEmail(normalizedUserEmail),
      role: role || ROLES.STUDENT,
      courses:
        courses || ROLE_DEFINITIONS[role || ROLES.STUDENT].defaultCourses,
    });

    if (result.data.success) {
      return {
        success: true,
        message: "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      };
    } else {
      return { success: false, error: result.data.error || "–ì—Ä–µ—à–∫–∞" };
    }
  } catch (error) {
    console.error("Error creating user by admin:", error);
    return {
      success: false,
      error: error.message || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª",
    };
  }
};
/**
 * –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∫—É—Ä—Å (—Å–∞–º–æ –∑–∞ –∞–¥–º–∏–Ω–∏)
 */
export const addCourseAccessToUser = async (
  adminEmail,
  targetUserEmail,
  courseId
) => {
  try {
    const normalizedAdminEmail = normalizeEmail(adminEmail);
    const normalizedTargetEmail = normalizeEmail(targetUserEmail);

    if (!normalizedAdminEmail || !normalizedTargetEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ admin –∏–º–∞ –ø—Ä–∞–≤–∞
    const adminProfile = await getUserProfile(normalizedAdminEmail);
    if (
      !adminProfile.success ||
      !hasPermission(adminProfile.data, "manage_users")
    ) {
      return { success: false, error: "–ù—è–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è" };
    }

    const result = await grantCourseAccess(normalizedTargetEmail, courseId);
    return result;
  } catch (error) {
    console.error("Error adding course access:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø" };
  }
};

/**
 * –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∫—É—Ä—Å (—Å–∞–º–æ –∑–∞ –∞–¥–º–∏–Ω–∏)
 */
export const removeCourseAccessFromUser = async (
  adminEmail,
  targetUserEmail,
  courseId
) => {
  try {
    const normalizedAdminEmail = normalizeEmail(adminEmail);
    const normalizedTargetEmail = normalizeEmail(targetUserEmail);

    if (!normalizedAdminEmail || !normalizedTargetEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ admin –∏–º–∞ –ø—Ä–∞–≤–∞
    const adminProfile = await getUserProfile(normalizedAdminEmail);
    if (
      !adminProfile.success ||
      !hasPermission(adminProfile.data, "manage_users")
    ) {
      return { success: false, error: "–ù—è–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è" };
    }

    const result = await revokeCourseAccess(normalizedTargetEmail, courseId);
    return result;
  } catch (error) {
    console.error("Error removing course access:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø" };
  }
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (—Å–∞–º–æ –∑–∞ –∞–¥–º–∏–Ω–∏)
 */
export const getAdminUsersList = async (adminEmail) => {
  try {
    const normalizedAdminEmail = normalizeEmail(adminEmail);

    if (!normalizedAdminEmail) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω admin email" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ admin –∏–º–∞ –ø—Ä–∞–≤–∞
    const adminProfile = await getUserProfile(normalizedAdminEmail);
    if (
      !adminProfile.success ||
      !hasPermission(adminProfile.data, "view_analytics")
    ) {
      return { success: false, error: "–ù—è–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è" };
    }

    return await getAllUsers();
  } catch (error) {
    console.error("Error getting admin users list:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏" };
  }
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –¥–µ—Ç–∞–π–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
 */
export const getUserDetailedStats = async (userEmail, requestingUserEmail) => {
  try {
    const normalizedUserEmail = normalizeEmail(userEmail);
    const normalizedRequestingEmail = normalizeEmail(requestingUserEmail);

    if (!normalizedUserEmail || !normalizedRequestingEmail) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –ø—Ä–∞–≤–∞ - –∏–ª–∏ —Å—ä—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏–ª–∏ –∞–¥–º–∏–Ω
    if (normalizedUserEmail !== normalizedRequestingEmail) {
      const adminProfile = await getUserProfile(normalizedRequestingEmail);
      if (
        !adminProfile.success ||
        !hasPermission(adminProfile.data, "view_analytics")
      ) {
        return { success: false, error: "–ù—è–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è" };
      }
    }

    const stats = await getActivityStats(normalizedUserEmail);

    if (stats.success) {
      // –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ
      const processedStats = {
        ...stats.data,
        summary: {
          totalTimeSpent: stats.data.sessions.reduce(
            (acc, session) => acc + (session.duration || 0),
            0
          ),
          averageSessionTime:
            stats.data.sessions.length > 0
              ? stats.data.sessions.reduce(
                  (acc, session) => acc + (session.duration || 0),
                  0
                ) / stats.data.sessions.length
              : 0,
          completionRate:
            stats.data.videoProgress.length > 0
              ? (stats.data.videoProgress.filter((v) => v.isCompleted).length /
                  stats.data.videoProgress.length) *
                100
              : 0,
          coursesCompleted: stats.data.courseProgress.filter(
            (c) => c.completedAt
          ).length,
          mostWatchedCourse: getMostWatchedCourse(stats.data.videoProgress),
          lastActivity: getLastActivity(
            stats.data.sessions,
            stats.data.videoProgress
          ),
        },
      };

      return { success: true, data: processedStats };
    }

    return stats;
  } catch (error) {
    console.error("Error getting detailed user stats:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" };
  }
};

// ============= –ö–£–†–°–û–í–ï –ò –í–ò–î–ï–ê =============

/**
 * –ó–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –∫—É—Ä—Å
 */
export const enrollUserInCourse = async (userEmail, courseId, totalVideos) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !courseId || !totalVideos) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏–º–∞ –¥–æ—Å—Ç—ä–ø
    const profile = await getUserProfile(normalizedEmail);
    if (!profile.success) {
      return { success: false, error: "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞" };
    }

    if (!hasAccessToCourse(profile.data, courseId)) {
      return { success: false, error: "–ù—è–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–æ–∑–∏ –∫—É—Ä—Å" };
    }

    // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫—É—Ä—Å–∞
    const result = await enrollInCourse(normalizedEmail, courseId, totalVideos);
    return result;
  } catch (error) {
    console.error("Error enrolling user in course:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –∫—É—Ä—Å" };
  }
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∫—É—Ä—Å
 */
export const getCourseProgress = async (userEmail, courseId) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }
    return await getFirestoreCourseProgress(normalizedEmail, courseId);
  } catch (error) {
    console.error("Error getting course progress:", error);
    return {
      success: false,
      error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫—É—Ä—Å",
    };
  }
};

/**
 * –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ
 */
export const startVideo = async (userEmail, courseId, videoId) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !courseId || !videoId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const result = await recordVideoWatch(normalizedEmail, courseId, videoId);
    return result;
  } catch (error) {
    console.error("Error starting video:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ" };
  }
};

/**
 * –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ
 */
export const completeVideo = async (userEmail, courseId, videoId) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !courseId || !videoId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const result = await markVideoAsCompleted(
      normalizedEmail,
      courseId,
      videoId
    );
    return result;
  } catch (error) {
    console.error("Error completing video:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ" };
  }
};

/**
 * –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ
 */
export const uncompleteVideo = async (userEmail, courseId, videoId) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !courseId || !videoId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    console.log(
      `üîÑ –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ: ${videoId} –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª ${normalizedEmail}`
    );

    const result = await markVideoAsUncompleted(
      normalizedEmail,
      courseId,
      videoId
    );

    if (result.success) {
      console.log(`‚úÖ –í–∏–¥–µ–æ ${videoId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–æ –æ—Ç –∑–∞–≤—ä—Ä—à–µ–Ω–∏`);
    } else {
      console.error(
        `‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ: ${result.error}`
      );
    }

    return result;
  } catch (error) {
    console.error("Error uncompleting video:", error);
    return {
      success: false,
      error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ",
    };
  }
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞ –∑–∞ –∫—É—Ä—Å
 */
export const getUserCompletedVideos = async (userEmail, courseId) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }
    return await getCompletedVideos(normalizedEmail, courseId);
  } catch (error) {
    console.error("Error getting completed videos:", error);
    return {
      success: false,
      error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞",
    };
  }
};

// ============= –°–ï–°–ò–ò =============

/**
 * –ü—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞ —Å–µ—Å–∏—è
 */
export const logoutUser = async (userEmail) => {
  try {
    const normalizedEmail = normalizeEmail(userEmail);

    if (!normalizedEmail) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }
    await endUserSession(normalizedEmail);
    return { success: true };
  } catch (error) {
    console.error("Error logging out user:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ª–∏–∑–∞–Ω–µ" };
  }
};

// ============= –ü–û–ú–û–©–ù–ò –§–£–ù–ö–¶–ò–ò =============

/**
 * –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ display name –æ—Ç email
 */
const getDisplayNameFromEmail = (email) => {
  if (!email || !email.includes("@")) return "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª";
  return (
    email.split("@")[0].charAt(0).toUpperCase() + email.split("@")[0].slice(1)
  );
};

/**
 * –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞–π-–≥–ª–µ–¥–∞–Ω–∏—è –∫—É—Ä—Å
 */
const getMostWatchedCourse = (videoProgress) => {
  if (!videoProgress || !videoProgress.length) return null;

  const courseCounts = videoProgress.reduce((acc, video) => {
    acc[video.courseId] = (acc[video.courseId] || 0) + 1;
    return acc;
  }, {});

  return Object.keys(courseCounts).reduce((a, b) =>
    courseCounts[a] > courseCounts[b] ? a : b
  );
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
 */
const getLastActivity = (sessions, videoProgress) => {
  const allActivities = [
    ...(sessions || []).map((s) => ({ type: "session", date: s.loginAt })),
    ...(videoProgress || []).map((v) => ({ type: "video", date: v.watchedAt })),
  ];

  if (!allActivities.length) return null;

  return allActivities.reduce((latest, current) =>
    current.date > latest.date ? current : latest
  );
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–æ–ª—è
 */
export const isValidRole = (role) => {
  return Object.values(ROLES).includes(role);
};

/**
 * –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ä–æ–ª—è
 */
export const getRoleInfo = (role) => {
  return ROLE_DEFINITIONS[role] || ROLE_DEFINITIONS[ROLES.GUEST];
};

// –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
export default {
  // –û—Å–Ω–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  initializeUser,
  getFullUserProfile,
  hasAccessToCourse,
  hasPermission,
  logoutUser,

  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏
  adminCreateUser,
  addCourseAccessToUser,
  removeCourseAccessFromUser,
  getAdminUsersList,
  getUserDetailedStats,

  // –ö—É—Ä—Å–æ–≤–µ
  enrollUserInCourse,
  getCourseProgress,

  // –í–∏–¥–µ–∞
  startVideo,
  completeVideo,
  uncompleteVideo,
  getUserCompletedVideos,

  // –ü–æ–º–æ—â–Ω–∏
  getRoleInfo,
  isValidRole,

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
  ROLES,
  ROLE_DEFINITIONS,
};
