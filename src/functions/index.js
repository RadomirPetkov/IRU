const functions = require('firebase-functions');
const admin = require('firebase-admin');
const cors = require('cors')({ origin: true }); // üÜï –î–æ–±–∞–≤—è–º–µ CORS

admin.initializeApp();

// üÜï –í–ê–†–ò–ê–ù–¢ 1: Callable Function (–ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–≤–∞ CORS)
exports.createUser = functions.region('europe-west3').https.onCall(async (data, context) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—Ä–∞–≤–∞
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', '–¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –ª–æ–≥–Ω–∞—Ç–∏');
  }

  try {
    // –í–∑–µ–º–∞–º–µ email –æ—Ç —Ç–æ–∫–µ–Ω–∞
    const callerEmail = context.auth.token.email;
    
    if (!callerEmail) {
      throw new functions.https.HttpsError('unauthenticated', '–ù—è–º–∞ email –≤ —Ç–æ–∫–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –µ –∞–¥–º–∏–Ω
    const callerProfileRef = admin.firestore().doc(`users/${callerEmail}/profile/info`);
    const callerDoc = await callerProfileRef.get();
    
    if (!callerDoc.exists) {
      throw new functions.https.HttpsError('permission-denied', '–ü—Ä–æ—Ñ–∏–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞');
    }
    
    const callerRole = callerDoc.data().role;
    
    if (callerRole !== 'admin') {
      throw new functions.https.HttpsError('permission-denied', '–ù—è–º–∞—Ç–µ –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞');
    }

    const { email, password, displayName, role, courses } = data;

    // –í–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!email || !password) {
      throw new functions.https.HttpsError('invalid-argument', 'Email –∏ –ø–∞—Ä–æ–ª–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏');
    }

    if (password.length < 6) {
      throw new functions.https.HttpsError('invalid-argument', '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞');
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ email
    const normalizedEmail = email.trim().toLowerCase();

    console.log(`üìù –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª: ${normalizedEmail} –æ—Ç –∞–¥–º–∏–Ω: ${callerEmail}`);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤ Authentication
    const userRecord = await admin.auth().createUser({
      email: normalizedEmail,
      password: password,
      displayName: displayName || normalizedEmail.split('@')[0],
    });

    console.log(`‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å—ä–∑–¥–∞–¥–µ–Ω –≤ Auth: ${userRecord.uid}`);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª –≤—ä–≤ Firestore
    const userRef = admin.firestore().doc(`users/${normalizedEmail}`);
    
    // Parent document
    await userRef.set({
      email: normalizedEmail,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      isActive: true,
      createdBy: callerEmail,
    });

    // Profile info
    await userRef.collection('profile').doc('info').set({
      email: normalizedEmail,
      displayName: displayName || normalizedEmail.split('@')[0],
      role: role || 'student',
      joinDate: admin.firestore.FieldValue.serverTimestamp(),
      lastLogin: admin.firestore.FieldValue.serverTimestamp(),
      isActive: true,
    });

    // Permissions
    await userRef.collection('permissions').doc('access').set({
      courses: courses || ['basic'],
      customPermissions: [],
    });

    console.log(`‚úÖ Firestore –ø—Ä–æ—Ñ–∏–ª —Å—ä–∑–¥–∞–¥–µ–Ω –∑–∞: ${normalizedEmail}`);

    return { 
      success: true, 
      uid: userRecord.uid,
      email: normalizedEmail,
      message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    };

  } catch (error) {
    console.error('‚ùå Error creating user:', error);
    
    // –ü–æ-–¥–æ–±—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏
    if (error.code === 'auth/email-already-exists') {
      throw new functions.https.HttpsError('already-exists', 'Email –∞–¥—Ä–µ—Å—ä—Ç –≤–µ—á–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞');
    }
    
    if (error instanceof functions.https.HttpsError) {
      throw error;
    }
    
    throw new functions.https.HttpsError('internal', error.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
  }
});

// üÜï –í–ê–†–ò–ê–ù–¢ 2: HTTP Function —Å CORS (–∞–∫–æ callable –Ω–µ —Ä–∞–±–æ—Ç–∏)
exports.createUserHTTP = functions.region('europe-west3').https.onRequest((req, res) => {
  cors(req, res, async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ POST –º–µ—Ç–æ–¥
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
      // –í–∑–µ–º–∞–º–µ Authorization header
      const authorization = req.headers.authorization;
      if (!authorization || !authorization.startsWith('Bearer ')) {
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const token = authorization.split('Bearer ')[1];
      const decodedToken = await admin.auth().verifyIdToken(token);
      const callerEmail = decodedToken.email;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ (–∫–æ–ø–∏—Ä–∞–º–µ –ª–æ–≥–∏–∫–∞—Ç–∞ –æ—Ç callable)
      const callerProfileRef = admin.firestore().doc(`users/${callerEmail}/profile/info`);
      const callerDoc = await callerProfileRef.get();
      
      if (!callerDoc.exists || callerDoc.data().role !== 'admin') {
        return res.status(403).json({ error: 'Permission denied' });
      }

      const { email, password, displayName, role, courses } = req.body;

      // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (—Å—ä—â–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–æ callable)
      const normalizedEmail = email.trim().toLowerCase();
      
      const userRecord = await admin.auth().createUser({
        email: normalizedEmail,
        password: password,
        displayName: displayName || normalizedEmail.split('@')[0],
      });

      const userRef = admin.firestore().doc(`users/${normalizedEmail}`);
      
      await userRef.set({
        email: normalizedEmail,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        isActive: true,
        createdBy: callerEmail,
      });

      await userRef.collection('profile').doc('info').set({
        email: normalizedEmail,
        displayName: displayName || normalizedEmail.split('@')[0],
        role: role || 'student',
        joinDate: admin.firestore.FieldValue.serverTimestamp(),
        lastLogin: admin.firestore.FieldValue.serverTimestamp(),
        isActive: true,
      });

      await userRef.collection('permissions').doc('access').set({
        courses: courses || ['basic'],
        customPermissions: [],
      });

      return res.status(200).json({ 
        success: true, 
        uid: userRecord.uid,
        email: normalizedEmail,
        message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      });

    } catch (error) {
      console.error('Error:', error);
      return res.status(500).json({ 
        success: false, 
        error: error.message || 'Internal error'
      });
    }
  });
});