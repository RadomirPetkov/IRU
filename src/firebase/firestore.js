// src/firebase/firestore.js - Production –≥–æ—Ç–æ–≤–∞ –≤–µ—Ä—Å–∏—è —Å —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  doc,
  getDoc,
  setDoc,
  updateDoc,
  collection,
  query,
  where,
  getDocs,
  arrayUnion,
  arrayRemove,
  increment,
  serverTimestamp,
  orderBy,
  limit,
} from "firebase/firestore";

// –°–∏–≥—É—Ä–Ω–∞ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
if (!process.env.REACT_APP_FIREBASE_PROJECT_ID) {
  throw new Error("REACT_APP_FIREBASE_PROJECT_ID is required");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);

// ============= –ü–û–¢–†–ï–ë–ò–¢–ï–õ–°–ö–ò –ü–†–û–§–ò–õ–ò =============

// –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –ø—Ä–æ—Ñ–∏–ª
export const createUserProfile = async (userEmail, userData = {}) => {
  try {
    if (!userEmail || !userEmail.includes("@")) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    const userRef = doc(db, "users", userEmail);

    const defaultData = {
      email: userEmail,
      displayName: userData.displayName || "–ù–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª",
      role: userData.role || "student",
      joinDate: serverTimestamp(),
      lastLogin: serverTimestamp(),
      isActive: true,
    };

    await setDoc(doc(userRef, "profile", "info"), defaultData);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∏ –ø—Ä–∞–≤–∞
    await setDoc(doc(userRef, "permissions", "access"), {
      courses: userData.courses || ["basic"],
      customPermissions: userData.customPermissions || [],
    });

    return { success: true, message: "–ü—Ä–æ—Ñ–∏–ª—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ" };
  } catch (error) {
    // –ù–µ –∏–∑–ª–æ–∂–∞–≤–∞–º–µ —Å–∏—Å—Ç–µ–º–Ω–∏ –≥—Ä–µ—à–∫–∏ –≤ production
    console.error("Error creating user profile:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª" };
  }
};

// –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –ø—Ä–æ—Ñ–∏–ª
export const getUserProfile = async (userEmail) => {
  try {
    if (!userEmail || !userEmail.includes("@")) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    const profileRef = doc(db, "users", userEmail, "profile", "info");
    const permissionsRef = doc(db, "users", userEmail, "permissions", "access");

    const [profileSnap, permissionsSnap] = await Promise.all([
      getDoc(profileRef),
      getDoc(permissionsRef),
    ]);

    if (!profileSnap.exists()) {
      return { success: false, error: "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞" };
    }

    const profile = profileSnap.data();
    const permissions = permissionsSnap.exists()
      ? permissionsSnap.data()
      : { courses: [], customPermissions: [] };

    return {
      success: true,
      data: {
        ...profile,
        permissions,
      },
    };
  } catch (error) {
    console.error("Error getting user profile:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª" };
  }
};

// –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–µ–Ω –≤—Ö–æ–¥
export const updateLastLogin = async (userEmail) => {
  try {
    if (!userEmail || !userEmail.includes("@")) {
      return;
    }

    const profileRef = doc(db, "users", userEmail, "profile", "info");
    await updateDoc(profileRef, {
      lastLogin: serverTimestamp(),
    });
  } catch (error) {
    console.error("Error updating last login:", error);
    // –ù–µ —Å–ø–∏—Ä–∞–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∑–∞—Ä–∞–¥–∏ —Ç–∞–∑–∏ –≥—Ä–µ—à–∫–∞
  }
};

// ============= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –ü–†–ê–í–ê =============

// –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å–æ–≤–∏ –ø—Ä–∞–≤–∞
export const updateUserCourseAccess = async (userEmail, courses) => {
  try {
    if (!userEmail || !Array.isArray(courses)) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const permissionsRef = doc(db, "users", userEmail, "permissions", "access");
    await updateDoc(permissionsRef, {
      courses: courses,
    });
    return { success: true };
  } catch (error) {
    console.error("Error updating user access:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–∞" };
  }
};

// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∫—É—Ä—Å
export const grantCourseAccess = async (userEmail, courseId) => {
  try {
    if (!userEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const permissionsRef = doc(db, "users", userEmail, "permissions", "access");
    await updateDoc(permissionsRef, {
      courses: arrayUnion(courseId),
    });
    return { success: true };
  } catch (error) {
    console.error("Error granting course access:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø" };
  }
};

// –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∫—É—Ä—Å
export const revokeCourseAccess = async (userEmail, courseId) => {
  try {
    if (!userEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const permissionsRef = doc(db, "users", userEmail, "permissions", "access");
    await updateDoc(permissionsRef, {
      courses: arrayRemove(courseId),
    });
    return { success: true };
  } catch (error) {
    console.error("Error revoking course access:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø" };
  }
};

// ============= –ü–†–û–°–õ–ï–î–Ø–í–ê–ù–ï –ù–ê –ü–†–û–ì–†–ï–° =============

// –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å
export const enrollInCourse = async (userEmail, courseId, totalVideos) => {
  try {
    if (!userEmail || !courseId || !totalVideos) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const courseProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `course_${courseId}`
    );

    await setDoc(courseProgressRef, {
      courseId,
      enrolledAt: serverTimestamp(),
      completedAt: null,
      completedVideos: [],
      totalVideos,
      progressPercentage: 0,
      lastAccessedAt: serverTimestamp(),
    });

    return { success: true };
  } catch (error) {
    console.error("Error enrolling in course:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –∫—É—Ä—Å" };
  }
};

// –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫—É—Ä—Å
export const getCourseProgress = async (userEmail, courseId) => {
  try {
    if (!userEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const courseProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `course_${courseId}`
    );
    const progressSnap = await getDoc(courseProgressRef);

    if (progressSnap.exists()) {
      return { success: true, data: progressSnap.data() };
    } else {
      return { success: false, error: "–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å –∑–∞ —Ç–æ–∑–∏ –∫—É—Ä—Å" };
    }
  } catch (error) {
    console.error("Error getting course progress:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å" };
  }
};

// ============= –ü–†–û–°–õ–ï–î–Ø–í–ê–ù–ï –ù–ê –í–ò–î–ï–ê =============

// –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –≥–ª–µ–¥–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ
export const recordVideoWatch = async (userEmail, courseId, videoId) => {
  try {
    if (!userEmail || !courseId || !videoId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const videoProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `video_${videoId}`
    );
    const videoProgressSnap = await getDoc(videoProgressRef);

    if (videoProgressSnap.exists()) {
      // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∑–∞–ø–∏—Å
      await updateDoc(videoProgressRef, {
        watchedAt: serverTimestamp(),
        watchCount: increment(1),
      });
    } else {
      // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –∑–∞–ø–∏—Å
      await setDoc(videoProgressRef, {
        courseId,
        videoId,
        watchedAt: serverTimestamp(),
        completedAt: null,
        watchCount: 1,
        totalWatchTime: 0,
        isCompleted: false,
      });
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–µ–Ω –¥–æ—Å—Ç—ä–ø –¥–æ –∫—É—Ä—Å–∞
    const courseProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `course_${courseId}`
    );
    await updateDoc(courseProgressRef, {
      lastAccessedAt: serverTimestamp(),
    });

    return { success: true };
  } catch (error) {
    console.error("Error recording video watch:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –≥–ª–µ–¥–∞–Ω–µ" };
  }
};

// –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ
export const markVideoAsCompleted = async (userEmail, courseId, videoId) => {
  try {
    if (!userEmail || !courseId || !videoId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    console.log(
      `üìπ –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ ${videoId} –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ –∑–∞ ${userEmail}`
    );

    // üÜï –ü–†–û–ú–ï–ù–ï–ù–û: –ü—ä—Ä–≤–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    const videoProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `video_${videoId}`
    );
    const videoProgressSnap = await getDoc(videoProgressRef);

    if (!videoProgressSnap.exists()) {
      // üÜï –ê–ö–û –ù–ï –°–™–©–ï–°–¢–í–£–í–ê, –°–™–ó–î–ê–í–ê–ú–ï –ì–û
      console.log(`üìù –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ video progress –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞ ${videoId}`);
      await setDoc(videoProgressRef, {
        courseId,
        videoId,
        watchedAt: serverTimestamp(),
        completedAt: serverTimestamp(),
        isCompleted: true,
        watchCount: 1,
        totalWatchTime: 0,
      });
    } else {
      // üÜï –ê–ö–û –°–™–©–ï–°–¢–í–£–í–ê, –û–ë–ù–û–í–Ø–í–ê–ú–ï –ì–û
      console.log(`üìù –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â video progress –∑–∞ ${videoId}`);
      await updateDoc(videoProgressRef, {
        completedAt: serverTimestamp(),
        isCompleted: true,
      });
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å–æ–≤–∏—è –ø—Ä–æ–≥—Ä–µ—Å
    const courseProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `course_${courseId}`
    );
    const courseProgressSnap = await getDoc(courseProgressRef);

    if (courseProgressSnap.exists()) {
      const courseData = courseProgressSnap.data();
      const currentCompletedVideos = courseData.completedVideos || [];

      // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤–∏–¥–µ–æ—Ç–æ –≤–µ—á–µ –Ω–µ –µ –¥–æ–±–∞–≤–µ–Ω–æ
      if (!currentCompletedVideos.includes(videoId)) {
        const newCompletedVideos = [...currentCompletedVideos, videoId];
        const progressPercentage =
          (newCompletedVideos.length / courseData.totalVideos) * 100;

        const updateData = {
          completedVideos: newCompletedVideos,
          progressPercentage,
          lastAccessedAt: serverTimestamp(),
        };

        // –ê–∫–æ –∫—É—Ä—Å—ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω
        if (progressPercentage === 100) {
          updateData.completedAt = serverTimestamp();
          console.log(`üéâ –ö—É—Ä—Å ${courseId} –∑–∞–≤—ä—Ä—à–µ–Ω –Ω–∞ 100%!`);
        }

        await updateDoc(courseProgressRef, updateData);
        console.log(
          `‚úÖ –ü—Ä–æ–≥—Ä–µ—Å –æ–±–Ω–æ–≤–µ–Ω: ${newCompletedVideos.length}/${
            courseData.totalVideos
          } (${Math.round(progressPercentage)}%)`
        );
      } else {
        console.log(`‚ÑπÔ∏è –í–∏–¥–µ–æ ${videoId} –≤–µ—á–µ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–æ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ`);
      }
    } else {
      // üÜï –ê–ö–û –ö–£–†–°–û–í–ò–Ø–¢ –ü–†–û–ì–†–ï–° –ù–ï –°–™–©–ï–°–¢–í–£–í–ê, –°–™–ó–î–ê–í–ê–ú–ï –ì–û
      console.log(`üìù –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ course progress –∑–∞ –∫—É—Ä—Å ${courseId}`);
      await setDoc(courseProgressRef, {
        courseId,
        enrolledAt: serverTimestamp(),
        completedAt: null,
        completedVideos: [videoId],
        totalVideos: 1, // –©–µ —Å–µ –æ–±–Ω–æ–≤–∏ –ø–æ-–∫—ä—Å–Ω–æ
        progressPercentage: 100, // –í—Ä–µ–º–µ–Ω–Ω–æ
        lastAccessedAt: serverTimestamp(),
      });
    }

    return { success: true };
  } catch (error) {
    console.error("Error marking video as completed:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ" };
  }
};

// –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ
export const markVideoAsUncompleted = async (userEmail, courseId, videoId) => {
  try {
    if (!userEmail || !courseId || !videoId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    console.log(
      `üîÑ –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ ${videoId} –∑–∞ ${userEmail}`
    );

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ –ø—Ä–æ–≥—Ä–µ—Å–∞
    const videoProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `video_${videoId}`
    );
    await updateDoc(videoProgressRef, {
      completedAt: null,
      isCompleted: false,
      uncompletedAt: serverTimestamp(), // –ó–∞–ø–∏—Å–≤–∞–º–µ –∫–æ–≥–∞ –µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–æ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ
    });

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫—É—Ä—Å–æ–≤–∏—è –ø—Ä–æ–≥—Ä–µ—Å
    const courseProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `course_${courseId}`
    );
    const courseProgressSnap = await getDoc(courseProgressRef);

    if (courseProgressSnap.exists()) {
      const courseData = courseProgressSnap.data();
      const currentCompletedVideos = courseData.completedVideos || [];

      // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤–∏–¥–µ–æ—Ç–æ –æ—Ç –∑–∞–≤—ä—Ä—à–µ–Ω–∏—Ç–µ
      const newCompletedVideos = currentCompletedVideos.filter(
        (id) => id !== videoId
      );
      const progressPercentage =
        courseData.totalVideos > 0
          ? (newCompletedVideos.length / courseData.totalVideos) * 100
          : 0;

      const updateData = {
        completedVideos: newCompletedVideos,
        progressPercentage,
        lastAccessedAt: serverTimestamp(),
        completedAt: null, // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –∫—É—Ä—Å–∞ –∞–∫–æ –µ –∏–º–∞–ª–æ —Ç–∞–∫–æ–≤–∞
      };

      await updateDoc(courseProgressRef, updateData);
      console.log(
        `‚úÖ –ü—Ä–æ–≥—Ä–µ—Å –æ–±–Ω–æ–≤–µ–Ω: ${newCompletedVideos.length}/${
          courseData.totalVideos
        } (${Math.round(progressPercentage)}%)`
      );
      console.log(`üìâ –í–∏–¥–µ–æ ${videoId} –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–æ –æ—Ç –∑–∞–≤—ä—Ä—à–µ–Ω–∏`);
    }

    return { success: true };
  } catch (error) {
    console.error("Error marking video as uncompleted:", error);
    return {
      success: false,
      error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ",
    };
  }
};

// –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞ –∑–∞ –∫—É—Ä—Å
export const getCompletedVideos = async (userEmail, courseId) => {
  try {
    if (!userEmail || !courseId) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" };
    }

    const courseProgressRef = doc(
      db,
      "users",
      userEmail,
      "progress",
      `course_${courseId}`
    );
    const progressSnap = await getDoc(courseProgressRef);

    if (progressSnap.exists()) {
      const data = progressSnap.data();
      return { success: true, completedVideos: data.completedVideos || [] };
    } else {
      return { success: true, completedVideos: [] };
    }
  } catch (error) {
    console.error("Error getting completed videos:", error);
    return {
      success: false,
      error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –≤–∏–¥–µ–∞",
    };
  }
};

// ============= –°–ï–°–ò–ò –ò –ê–ö–¢–ò–í–ù–û–°–¢ =============

// –ó–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞ —Å–µ—Å–∏—è
export const startUserSession = async (userEmail) => {
  try {
    if (!userEmail) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    const sessionId = Date.now().toString();
    const sessionRef = doc(db, "users", userEmail, "activity", sessionId);

    await setDoc(sessionRef, {
      loginAt: serverTimestamp(),
      logoutAt: null,
      duration: 0,
      videosWatched: [],
      coursesAccessed: [],
    });

    // –ó–∞–ø–∞–∑–≤–∞–º–µ session ID –≤ localStorage –∑–∞ –ø–æ-–∫—ä—Å–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
    if (typeof localStorage !== "undefined") {
      localStorage.setItem("currentSessionId", sessionId);
    }

    return { success: true, sessionId };
  } catch (error) {
    console.error("Error starting user session:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è" };
  }
};

// –ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è
export const endUserSession = async (userEmail) => {
  try {
    if (!userEmail) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    const sessionId =
      typeof localStorage !== "undefined"
        ? localStorage.getItem("currentSessionId")
        : null;
    if (!sessionId) return { success: false, error: "–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è" };

    const sessionRef = doc(db, "users", userEmail, "activity", sessionId);
    const sessionSnap = await getDoc(sessionRef);

    if (sessionSnap.exists()) {
      const sessionData = sessionSnap.data();
      const loginTime = sessionData.loginAt.toDate();
      const duration = Math.round((Date.now() - loginTime.getTime()) / 60000); // –≤ –º–∏–Ω—É—Ç–∏

      await updateDoc(sessionRef, {
        logoutAt: serverTimestamp(),
        duration,
      });

      if (typeof localStorage !== "undefined") {
        localStorage.removeItem("currentSessionId");
      }
    }

    return { success: true };
  } catch (error) {
    console.error("Error ending user session:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è" };
  }
};

// ============= –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ò –§–£–ù–ö–¶–ò–ò =============

// –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ (–∑–∞ –∞–¥–º–∏–Ω–∏)
export const getAllUsers = async () => {
  try {
    const usersRef = collection(db, "users");
    const snapshot = await getDocs(usersRef);

    const users = [];
    for (const userDoc of snapshot.docs) {
      const userEmail = userDoc.id;
      const profile = await getUserProfile(userEmail);
      if (profile.success) {
        users.push({
          email: userEmail,
          ...profile.data,
        });
      }
    }

    return { success: true, data: users };
  } catch (error) {
    console.error("Error getting all users:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏" };
  }
};

// –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
export const getActivityStats = async (userEmail, days = 30) => {
  try {
    if (!userEmail) {
      return { success: false, error: "–ù–µ–≤–∞–ª–∏–¥–µ–Ω email" };
    }

    // –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏–∏
    const sessionsRef = collection(db, "users", userEmail, "activity");
    const sessionsQuery = query(
      sessionsRef,
      orderBy("loginAt", "desc"),
      limit(100)
    );

    const sessionsSnap = await getDocs(sessionsQuery);
    const sessions = sessionsSnap.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));

    // –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –∫—É—Ä—Å–æ–≤–µ
    const progressRef = collection(db, "users", userEmail, "progress");
    const progressSnap = await getDocs(progressRef);

    const courseProgress = [];
    const videoProgress = [];

    progressSnap.docs.forEach((doc) => {
      const data = { id: doc.id, ...doc.data() };
      if (doc.id.startsWith("course_")) {
        courseProgress.push(data);
      } else if (doc.id.startsWith("video_")) {
        videoProgress.push(data);
      }
    });

    return {
      success: true,
      data: {
        sessions,
        courseProgress,
        videoProgress,
        totalSessions: sessions.length,
        totalVideosWatched: videoProgress.length,
        totalCoursesStarted: courseProgress.length,
      },
    };
  } catch (error) {
    console.error("Error getting activity stats:", error);
    return { success: false, error: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" };
  }
};

export default db;
