const {onCall} = require('firebase-functions/v2/https');
const {setGlobalOptions} = require('firebase-functions/v2');
const admin = require('firebase-admin');

admin.initializeApp();

// –ó–∞–¥–∞–≤–∞–º–µ –≥–ª–æ–±–∞–ª–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
setGlobalOptions({
  region: 'europe-west3',
  maxInstances: 10,
});

exports.createUser = onCall(async (request) => {
  console.log('üìù createUser function called');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  if (!request.auth) {
    throw new Error('–¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –ª–æ–≥–Ω–∞—Ç–∏');
  }

  try {
    const callerEmail = request.auth.token.email;
    
    if (!callerEmail) {
      throw new Error('–ù—è–º–∞ email –≤ —Ç–æ–∫–µ–Ω–∞');
    }

    console.log(`üë§ Caller: ${callerEmail}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞
    const callerProfileRef = admin.firestore().doc(`users/${callerEmail}/profile/info`);
    const callerDoc = await callerProfileRef.get();
    
    if (!callerDoc.exists) {
      console.error(`‚ùå Profile not found for: ${callerEmail}`);
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞');
    }
    
    const callerRole = callerDoc.data().role;
    
    console.log(`üîê Caller role: ${callerRole}`);
    
    if (callerRole !== 'admin') {
      console.error(`‚ùå Permission denied for role: ${callerRole}`);
      throw new Error('–ù—è–º–∞—Ç–µ –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞. –¢–µ–∫—É—â–∞ —Ä–æ–ª—è: ' + callerRole);
    }

    const { email, password, displayName, role, courses } = request.data;

    // –í–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!email || !password) {
      throw new Error('Email –∏ –ø–∞—Ä–æ–ª–∞ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏');
    }

    if (password.length < 6) {
      throw new Error('–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞');
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ email
    const normalizedEmail = email.trim().toLowerCase();

    console.log(`üìß Creating user: ${normalizedEmail}`);
    console.log(`üëî Role: ${role}`);
    console.log(`üìö Courses: ${courses?.length || 0}`);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤ Authentication
    const userRecord = await admin.auth().createUser({
      email: normalizedEmail,
      password: password,
      displayName: displayName || normalizedEmail.split('@')[0],
    });

    console.log(`‚úÖ Auth user created: ${userRecord.uid}`);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Firestore –¥–æ–∫—É–º–µ–Ω—Ç–∏
    const userRef = admin.firestore().doc(`users/${normalizedEmail}`);
    
    // Parent document
    await userRef.set({
      email: normalizedEmail,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      isActive: true,
      createdBy: callerEmail,
    });

    console.log(`‚úÖ Parent document created`);

    // Profile info
    await userRef.collection('profile').doc('info').set({
      email: normalizedEmail,
      displayName: displayName || normalizedEmail.split('@')[0],
      role: role || 'student',
      joinDate: admin.firestore.FieldValue.serverTimestamp(),
      lastLogin: admin.firestore.FieldValue.serverTimestamp(),
      isActive: true,
    });

    console.log(`‚úÖ Profile created with role: ${role}`);

    // Permissions
    await userRef.collection('permissions').doc('access').set({
      courses: courses || ['basic'],
      customPermissions: [],
    });

    console.log(`‚úÖ Permissions set: ${courses?.join(', ')}`);

    return { 
      success: true, 
      uid: userRecord.uid,
      email: normalizedEmail,
      role: role,
      message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    };

  } catch (error) {
    console.error('‚ùå Error in createUser:', error);
    
    // –ü–æ-–¥–æ–±—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏
    if (error.code === 'auth/email-already-exists') {
      throw new Error('Email –∞–¥—Ä–µ—Å—ä—Ç –≤–µ—á–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞');
    }
    
    throw new Error(error.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
  }
});